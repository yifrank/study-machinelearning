#从sklearn.datasets中里导入手写体数字加载器
from sklearn.datasets import load_digits
#通过数据记载器获得手写体数字的数码图像数据并存储在digits变量重
digits = load_digits()
#检视数据规模的特征维度
print(digits.data.shape)

#从sklearn.model_selection中导入train_test_split用于数据分割
from sklearn.model_selection import train_test_split
#随机选取75%的数据作为训练样本；其余25%的数据作为测试样本。
x_train,x_test,y_train,y_test = train_test_split(digits.data,
digits.target,test_size=0.25,random_state=33)
#分别检视训练与测试数据规模
print(y_train.shape)
print(y_test.shape)

#从sklearn.preprocessing里导入数据标准化模块
from sklearn.preprocessing import StandardScaler
#从sklearn.svm中里导入基于线性假设的支持向量机分类器LinearSVC
from sklearn.svm import LinearSVC
#从任然需要对训练和测试的特征数据进行标准化
ss = StandardScaler()
x_train = ss.fit_transform(x_train)
x_test = ss.transform(x_test)
#初始化线性假设的支持向量机分类器linearsvc
lsvc = LinearSVC()
#进行模型训练
lsvc.fit(x_train,y_train)
#利用模型进行预测
y_predict = lsvc.predict(x_test)

#准确性测评
print(lsvc.score(x_test,y_test))
#更加详细的分析
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict,target_names=digits.target_names.astype(str)))
